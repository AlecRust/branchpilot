// SPDX-License-Identifier: MIT

import fs from 'node:fs/promises'
import path from 'node:path'
import { DateTime } from 'luxon'
import { runDoctor } from './doctor.js'
import { getDefaultBranch } from './gitgh.js'
import { Logger } from './logger.js'

export type InitOptions = {
	force?: boolean
	verbose?: boolean
}

export type InitResult = {
	success: boolean
	configPath: string
	ticketsDir: string
	ticketsCreated: string[]
	message: string
}

async function getSystemTimezone(): Promise<string> {
	return DateTime.local().zoneName ?? 'UTC'
}

function generateConfigToml(ticketsDir: string, timezone: string): string {
	return `# branchpilot configuration
# Generated by branchpilot init

# Directories to scan for ticket files
dirs = ["${ticketsDir}"]

# Default timezone for tickets (if not specified in ticket)
timezone = "${timezone}"

# Push mode: force-with-lease (default), ff-only, or force
# pushMode = "force-with-lease"

# Remote to push to (defaults to origin)
# remote = "origin"

# Default base branch (auto-detected if not specified)
# defaultBase = "main"
`
}

function generateExampleImmediate(_base: string): string {
	const oneMinuteAgo = DateTime.now().minus({ minutes: 1 }).toISO()
	return `---
branch: example/immediate-fix
title: Fix critical typo in README
when: "${oneMinuteAgo}"
labels: ["bug", "documentation"]
---

# Fix critical typo in README

This ticket was generated by \`branchpilot init\` and is already due!
Run \`branchpilot run\` to see it processed immediately.

## Changes
- Fixed typo in installation instructions
- Updated example commands
`
}

function generateExampleScheduled(base: string): string {
	const tomorrow10am = DateTime.now().plus({ days: 1 }).set({ hour: 10, minute: 0, second: 0, millisecond: 0 }).toISO()

	return `---
branch: feature/add-user-profile
title: Add user profile page
when: "${tomorrow10am}"
base: ${base}
labels: ["enhancement", "frontend"]
---

# Add user profile page

This ticket is scheduled for tomorrow at 10am.
It demonstrates how to schedule PRs for future dates.

## Features
- User avatar display
- Profile information editing
- Activity history
`
}

function generateExampleAdvanced(base: string): string {
	const threeDays = DateTime.now().plus({ days: 3 }).set({ hour: 14, minute: 30, second: 0, millisecond: 0 }).toISO()

	return `---
branch: refactor/improve-performance
title: Optimize database queries for better performance
when: "${threeDays}"
base: ${base}
rebase: true
labels: ["performance", "backend", "database"]
reviewers: ["teammate1", "teammate2"]
assignees: ["self"]
draft: true
---

# Optimize database queries

This advanced ticket demonstrates all available features:
- Scheduled for 3 days from now at 2:30 PM
- Will rebase onto base branch before creating PR
- Includes labels, reviewers, and assignees
- Opens as a draft PR

## Improvements
- Add database indexes for frequent queries
- Implement query caching layer
- Optimize N+1 query patterns
- Add performance monitoring

## Testing
- Load testing with 10k concurrent users
- Query performance benchmarks
- Cache hit rate analysis
`
}

export async function runInit(options: InitOptions = {}): Promise<InitResult> {
	const logger = new Logger(options.verbose ?? false)
	const cwd = process.cwd()
	const configPath = path.join(cwd, '.branchpilot.toml')
	const ticketsDir = 'tickets'
	const ticketsPath = path.join(cwd, ticketsDir)

	// Check if already initialized
	try {
		await fs.access(configPath)
		if (!options.force) {
			return {
				success: false,
				configPath,
				ticketsDir,
				ticketsCreated: [],
				message: `Project already initialized. Use --force to reinitialize.`,
			}
		}
		logger.info('Reinitializing project (--force flag provided)')
	} catch {
		// Config doesn't exist, good to proceed
	}

	// Run doctor to check environment (non-blocking warnings)
	logger.info('Checking environment...')
	const doctorOk = await runDoctor(false)
	if (!doctorOk) {
		logger.warn('Some environment checks failed. branchpilot may not work correctly.')
		logger.warn('Run "branchpilot doctor" for details.')
	}

	// Try to detect default branch
	let defaultBranch = 'main'
	try {
		const detected = await getDefaultBranch(cwd)
		if (detected) {
			defaultBranch = detected
			logger.verbose(`Detected default branch: ${defaultBranch}`)
		}
	} catch {
		logger.verbose('Could not detect default branch, using "main"')
	}

	// Get system timezone
	const timezone = await getSystemTimezone()
	logger.verbose(`Using system timezone: ${timezone}`)

	// Create tickets directory
	logger.info(`Creating ${ticketsDir}/ directory...`)
	await fs.mkdir(ticketsPath, { recursive: true })

	// Generate config file
	logger.info('Generating .branchpilot.toml...')
	const configContent = generateConfigToml(ticketsDir, timezone)
	await fs.writeFile(configPath, configContent, 'utf8')

	// Create example tickets
	logger.info('Creating example tickets...')
	const ticketsCreated: string[] = []

	const examples = [
		{ name: 'example-immediate.md', content: generateExampleImmediate(defaultBranch) },
		{ name: 'example-scheduled.md', content: generateExampleScheduled(defaultBranch) },
		{ name: 'example-advanced.md', content: generateExampleAdvanced(defaultBranch) },
	]

	for (const example of examples) {
		const ticketPath = path.join(ticketsPath, example.name)
		await fs.writeFile(ticketPath, example.content, 'utf8')
		ticketsCreated.push(example.name)
		logger.verbose(`Created ${ticketsDir}/${example.name}`)
	}

	const successMessage = `
✅ Initialized branchpilot in ${cwd}

Created:
  • .branchpilot.toml (configuration)
  • ${ticketsDir}/ directory with ${ticketsCreated.length} example tickets

Next steps:
  1. Review the example tickets in ${ticketsDir}/
  2. Run 'branchpilot run' to process tickets (one is ready now!)
  3. Run 'branchpilot doctor' if you encounter any issues
`

	logger.success(successMessage.trim())

	return {
		success: true,
		configPath,
		ticketsDir,
		ticketsCreated,
		message: successMessage.trim(),
	}
}
